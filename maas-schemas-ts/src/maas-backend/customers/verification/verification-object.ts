/*

undefined
MaaS verification schema

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as StateLog_ from 'maas-schemas-ts/core/components/state-log';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/verification/verification-object.json';

// Verification
// The purpose of this remains a mystery
export type Verification = t.Branded<
  {
    id?: string;
    identityId?: Units_.IdentityId;
    kycServiceId?: string;
    url?: Units_.Url;
    token?: string;
    status?: string;
    stateLog?: StateLog_.StateLog;
    created?: Units_.Time;
    modified?: Units_.Time;
  } & {
    id: Defined;
    identityId: Defined;
    kycServiceId: Defined;
    status: Defined;
    stateLog: Defined;
  },
  VerificationBrand
>;
export const Verification = t.brand(
  t.intersection([
    t.partial({
      id: t.string,
      identityId: Units_.IdentityId,
      kycServiceId: t.string,
      url: Units_.Url,
      token: t.string,
      status: t.string,
      stateLog: StateLog_.StateLog,
      created: Units_.Time,
      modified: Units_.Time,
    }),
    t.type({
      id: Defined,
      identityId: Defined,
      kycServiceId: Defined,
      status: Defined,
      stateLog: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
      identityId?: Units_.IdentityId;
      kycServiceId?: string;
      url?: Units_.Url;
      token?: string;
      status?: string;
      stateLog?: StateLog_.StateLog;
      created?: Units_.Time;
      modified?: Units_.Time;
    } & {
      id: Defined;
      identityId: Defined;
      kycServiceId: Defined;
      status: Defined;
      stateLog: Defined;
    },
    VerificationBrand
  > => true,
  'Verification',
);
export interface VerificationBrand {
  readonly Verification: unique symbol;
}

// VerificationObject
// The default export. More information at the top.
export type VerificationObject = t.Branded<unknown, VerificationObjectBrand>;
export const VerificationObject = t.brand(
  t.unknown,
  (x): x is t.Branded<unknown, VerificationObjectBrand> => true,
  'VerificationObject',
);
export interface VerificationObjectBrand {
  readonly VerificationObject: unique symbol;
}

export default VerificationObject;

// Success
