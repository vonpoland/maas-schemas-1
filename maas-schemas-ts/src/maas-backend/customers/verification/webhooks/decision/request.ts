/*

undefined
Request schema for webhook verification decision

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';
import * as Common_ from 'maas-schemas-ts/core/components/common';
import * as PersonalDocument_ from 'maas-schemas-ts/core/personal-document';
import * as Address_ from 'maas-schemas-ts/core/components/address';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/customers/verification/webhooks/decision/request.json';

// Request
// The default export. More information at the top.
export type Request = t.Branded<
  {
    payload?: {
      status?: string & ('fail' | 'success');
      verification?: {
        id?: Units_.Uuid;
        code?: number & (9001 | 9102 | 9103 | 9104 | 9121);
        person?: {
          firstName?: Common_.PersonalName;
          lastName?: Common_.PersonalName;
        };
        document?: {
          number?: string;
          type?: PersonalDocument_.DocumentType;
          country?: Address_.Country;
          validFrom?: Units_.IsoDate;
          validUntil?: Units_.IsoDate;
        };
        reason?: string;
        reasonCode?: number;
        status?: string;
        additionalVerifiedData?: {};
        vendorData?: string;
        decisionTime?: string;
        acceptanceTime?: string;
      } & {
        id: Defined;
        status: Defined;
        code: Defined;
        person: Defined;
        document: Defined;
      };
    } & {
      status: Defined;
      verification: Defined;
    };
    headers?: {
      'x-signature'?: string;
      'x-auth-client'?: Units_.Uuid;
    } & {
      'x-signature': Defined;
      'x-auth-client': Defined;
    };
    technicalData?: {
      ip?: string;
    };
  } & {
    headers: Defined;
    payload: Defined;
  },
  RequestBrand
>;
export const Request = t.brand(
  t.intersection([
    t.partial({
      payload: t.intersection([
        t.partial({
          status: t.intersection([
            t.string,
            t.union([t.literal('fail'), t.literal('success')]),
          ]),
          verification: t.intersection([
            t.partial({
              id: Units_.Uuid,
              code: t.intersection([
                t.number,
                t.union([
                  t.literal(9001),
                  t.literal(9102),
                  t.literal(9103),
                  t.literal(9104),
                  t.literal(9121),
                ]),
              ]),
              person: t.partial({
                firstName: Common_.PersonalName,
                lastName: Common_.PersonalName,
              }),
              document: t.partial({
                number: t.string,
                type: PersonalDocument_.DocumentType,
                country: Address_.Country,
                validFrom: Units_.IsoDate,
                validUntil: Units_.IsoDate,
              }),
              reason: t.string,
              reasonCode: t.number,
              status: t.string,
              additionalVerifiedData: t.type({}),
              vendorData: t.string,
              decisionTime: t.string,
              acceptanceTime: t.string,
            }),
            t.type({
              id: Defined,
              status: Defined,
              code: Defined,
              person: Defined,
              document: Defined,
            }),
          ]),
        }),
        t.type({
          status: Defined,
          verification: Defined,
        }),
      ]),
      headers: t.intersection([
        t.partial({
          'x-signature': t.string,
          'x-auth-client': Units_.Uuid,
        }),
        t.type({
          'x-signature': Defined,
          'x-auth-client': Defined,
        }),
      ]),
      technicalData: t.partial({
        ip: t.string,
      }),
    }),
    t.type({
      headers: Defined,
      payload: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      payload?: {
        status?: string & ('fail' | 'success');
        verification?: {
          id?: Units_.Uuid;
          code?: number & (9001 | 9102 | 9103 | 9104 | 9121);
          person?: {
            firstName?: Common_.PersonalName;
            lastName?: Common_.PersonalName;
          };
          document?: {
            number?: string;
            type?: PersonalDocument_.DocumentType;
            country?: Address_.Country;
            validFrom?: Units_.IsoDate;
            validUntil?: Units_.IsoDate;
          };
          reason?: string;
          reasonCode?: number;
          status?: string;
          additionalVerifiedData?: {};
          vendorData?: string;
          decisionTime?: string;
          acceptanceTime?: string;
        } & {
          id: Defined;
          status: Defined;
          code: Defined;
          person: Defined;
          document: Defined;
        };
      } & {
        status: Defined;
        verification: Defined;
      };
      headers?: {
        'x-signature'?: string;
        'x-auth-client'?: Units_.Uuid;
      } & {
        'x-signature': Defined;
        'x-auth-client': Defined;
      };
      technicalData?: {
        ip?: string;
      };
    } & {
      headers: Defined;
      payload: Defined;
    },
    RequestBrand
  > => true,
  'Request',
);
export interface RequestBrand {
  readonly Request: unique symbol;
}

export default Request;

// Success
